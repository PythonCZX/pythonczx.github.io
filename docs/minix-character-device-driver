<!DOCTYPE html><html lang="en" data-theme="classic"><head><title>Exploring Minix Character Device Drivers</title><link rel="shortcut icon" href="/assets/img/favicon.ico"><link rel="alternate" type="application/rss+xml" title="All Content Feed" href="https://shellsharks.com/feeds/all-feed.xml"><link rel="alternate" type="application/rss+xml" title="Post Feed" href="https://shellsharks.com/feeds/feed.xml"><link rel="alternate" type="application/rss+xml" title="Scrolls Feed" href="https://shellsharks.com/feeds/scroll-feed.xml"><link rel="alternate" type="application/rss+xml" title="Infosec Feed" href="https://shellsharks.com/feeds/infosec-feed.xml"><link rel="alternate" type="application/rss+xml" title="Notes Feed" href="https://shellsharks.com/feeds/note-feed.xml"><link rel="alternate" type="application/rss+xml" title="Devlogs Feed" href="https://shellsharks.com/feeds/devlog-feed.xml"><link rel="alternate" type="application/rss+xml" title="Links Feed" href="https://shellsharks.com/feeds/link-feed.xml"><link rel="alternate" type="application/rss+xml" title="Captains Log Feed" href="https://shellsharks.com/feeds/log-feed.xml"><link rel="alternate" type="application/rss+xml" title="Social Web Feed" href="https://shellsharks.com/feeds/socialweb-feed.xml"><link rel="alternate" type="application/rss+xml" title="Life Feed" href="https://shellsharks.com/feeds/life-feed.xml"><link rel="blogroll" type="text/xml" href="https://shellsharks.com/assets/rsrc/shellsharks-blogroll.opml"><link type="text/plain" rel="author" href="https://shellsharks.com/humans.txt" /><link rel="canonical" href="https://shellsharks.com/minix-character-device-driver"><link rel="apple-touch-icon" href="/assets/img/apple-touch-icon.png"><link rel="indieweb" href="/indieweb.txt" /><link href="https://github.com/shellsharks" rel="me"> <!--IndieAuth Provider--><link rel="authorization_endpoint" href="https://indieauth.com/auth"> <!--IndieAuth--><link rel="token_endpoint" href="https://tokens.indieauth.com/token"> <!--IndieAuth token endpoint--> <!--needed for button css--><link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-alpha.6/css/bootstrap.min.css" integrity="sha384-rwoIResjU2yc3z8GV/NPeZWAv56rSmLldC3R/AZzGRnGxQQKnKkoFVhFQhNUwEyJ" crossorigin="anonymous"><link href='/assets/css/style.css' rel='stylesheet' type='text/css'><link href="/assets/css/syntax.css" rel="stylesheet" ><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.1.1/src/regular/style.css" /><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.1.1/src/fill/style.css" /><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/@phosphor-icons/web@2.1.1/src/bold/style.css" /><meta charset="utf-8"><meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1"><meta name="viewport" content="width=device-width, initial-scale=1"><meta name="author" content="Michael Sass" /><meta name="description" content="Exploring a simple character device driver in Minix." /><meta name="keywords" content="Exploring Minix Character Device Drivers, shellsharks, code, cdev, linux, minix, technology" /><meta content="shellsharks" property="og:site_name" /><meta name="fediverse:creator" content="@shellsharks@shellsharks.social" /><meta name="robots" content="noai, noimageai, noml" /> <!--https://noml.info--> <script> const currentThemeX = localStorage.getItem('theme') ? localStorage.getItem('theme') : null; if (currentThemeX) { document.documentElement.setAttribute('data-theme', currentThemeX); } else if (matchMedia('(prefers-color-scheme: light)').matches) { localStorage.setItem('theme', "light"); } else if (matchMedia('(prefers-color-scheme: dark)').matches) { localStorage.setItem('theme', "classic"); } else { localStorage.setItem('theme', "classic"); } </script><meta content="Exploring Minix Character Device Drivers" property="og:title"><meta content="article" property="og:type"><meta content="Exploring a simple character device driver in Minix." property="og:description"><meta content="https://shellsharks.com/minix-character-device-driver" property="og:url"><meta content="2019-10-18T10:50:00-04:00" property="article:published_time"><meta content="https://shellsharks.com/about/" property="article:author"><meta content="https://shellsharks-images.s3.amazonaws.com/2019/minix.png" property="og:image"><meta content="technology" property="article:section"><meta content="code" property="article:tag"><meta content="cdev" property="article:tag"><meta content="linux" property="article:tag"><meta content="minix" property="article:tag"><meta content="technology" property="article:tag"> <script src="/assets/js/finrand.js"></script><style> @media (max-width: 2048px) { main { width:66%; } } @media (max-width: 1800px) { main { max-width:800px; width:95%; } } @media (max-width: 768px) { main { width:95%; } }</style><body><div class="container"><heading class="container_item"><style> /* * Made by Erik Terwan * 24th of November 2015 * MIT License * * * If you are thinking of using this in * production code, beware of the browser * prefixes. */ #menuToggle { display: block; position: relative; z-index: 1; -webkit-user-select: none; user-select: none; } #menuToggle a { text-decoration: none; transition: color 0.3s ease; color: var(--contrast-font-color); } .menu_section { color: var(--light-font-color); font-weight: 900; } .menu_section:nth-of-type(n+2) { margin-top:20px; } #menuToggle a:hover { color: var(--link-hover-color); } #menuToggle input { display: block; width: 40px; height: 32px; position: absolute; /*top: -7px;*/ /*left: -5px;*/ cursor: pointer; opacity: 0; /* hide this */ z-index: 2; /* and place it over the hamburger */ -webkit-touch-callout: none; } /* * Just a quick hamburger */ #menuToggle span { display: block; width: 27px; height: 3px; margin-bottom: 4px; position: relative; margin-top:4px; background: var(--font-color); border-radius: 3px; z-index: 1; transform-origin: 4px 0px; transition: transform 0.5s cubic-bezier(0.77,0.2,0.05,1.0), background 0.5s cubic-bezier(0.77,0.2,0.05,1.0), opacity 0.55s ease; } #menuToggle span:first-child { transform-origin: 0% 0%; } #menuToggle span:nth-last-child(2) { transform-origin: 0% 100%; } /* * Transform all the slices of hamburger * into a crossmark. */ #menuToggle input:checked ~ span { opacity: 1; transform: rotate(45deg) translate(-2px, -1px); background: var(--link-hover-color); } /* * But let's hide the middle one. */ #menuToggle input:checked ~ span:nth-last-child(3) { opacity: 0; transform: rotate(0deg) scale(0.2, 0.2); } /* * Ohyeah and the last one should go the other direction */ #menuToggle input:checked ~ span:nth-last-child(2) { transform: rotate(-45deg) translate(0, -1px); } /* * Make this absolute positioned * at the top left of the screen */ #menu { position: absolute; left:-10px; width: 200px; /*fit-content;*/ padding: 10px; margin-top:10px; /*display:none;*/ background: var(--light-background-color); color:var(--font-color); list-style-type: none; -webkit-font-smoothing: antialiased; max-height: calc(80vh); overflow:auto; overscroll-behavior: contain; border-radius: 5px; /* to stop flickering of text in safari */ } /* * And let's slide it in from the left */ #menuToggle input:checked ~ ul { display:block; } .hidden { display: none; }</style><div role="navigation" id="hamburger"><div id="menuToggle"> <input type="checkbox" /> <span></span> <span></span> <span></span><ul id="menu" class="hidden"><li class="menu_section">Main<li><a href="/home/feed" ><i class="ph ph-house"></i> Home Feed</a><li><a href="/about" ><i class="ph ph-identification-card"></i> About</a><li><a href="/feeds" ><i class="ph ph-rss"></i> Feeds</a><li><a href="/activity" ><i class="ph ph-pulse"></i> Activity</a><li><a href="https://shellsharks.social/@shellsharks" target="_blank"><i class="ph ph-mastodon-logo"></i> Mastodon</a><li><a href="mailto:mike@shellsharks.com" ><i class="ph ph-envelope"></i> Email</a><li><a href="https://ko-fi.com/shellsharks" ><i class="ph ph-coffee"></i> Buy me a Coffee</a><li id="themetoggler"><i class="ph ph-swatches" id="themetoggle"></i> Toggle theme<li class="menu_section">Site Nav<li><a href="/scrolls" ><i class="ph ph-scroll"></i> Scrolls Newsletter</a><li><a href="/podcast" ><i class="ph ph-microphone"></i> The Shellsharks Podcast</a><li><a href="/notebook" ><i class="ph ph-note"></i> Notebook</a><li><a href="/blogs" ><i class="ph ph-article"></i> Blogs</a><li><a href="/blogs/infosec" ><i class="ph ph-bug"></i> Infosec Blogs</a><li><a href="/captains-log" ><i class="ph-fill ph-notebook"></i> Captain's Log</a><li><a href="/devlog" ><i class="ph ph-code-block"></i> Devlog</a><li><a href="/linklog" ><i class="ph ph-link"></i> Linklog</a><li><a href="/blogroll" ><i class="ph ph-paint-roller"></i> Blogroll</a><li><a href="/fediverse" ><i class="ph ph-fediverse-logo"></i> Fediverse ‚ÅÇ</a><li><a href="/slashes" ><i class="ph ph-folder-simple-star"></i> Slashes</a><li><a href="/uses" ><i class="ph ph-hammer"></i> Uses</a><li><a href="/now" ><i class="ph ph-clock"></i> Now</a><li><a href="/tags" ><i class="ph ph-tag"></i> Tags</a><li><a href="/statboard" ><i class="ph ph-gauge"></i> Statboard</a><li><a href="/changelog" ><i class="ph ph-arrows-left-right"></i> Change Log</a><li><a href="/interests" ><i class="ph ph-heart"></i> Interests</a><li><a href="/ideas" ><i class="ph ph-lightbulb-filament"></i> Ideas</a><li><a href="/bookmarks" ><i class="ph ph-bookmarks"></i> Bookmarks</a><li><a href="/resume" ><i class="ph ph-read-cv-logo"></i> Resume</a><li><a href="/pro" ><i class="ph ph-seal"></i> Shellsharks Pro</a><li><a href="/sharkweek" ><i class="ph ph-calendar-heart"></i> >Shark Week</a><li><a href="/architecture" ><i class="ph ph-blueprint"></i> Architecture</a><li><a href="/roadmap" ><i class="ph ph-road-horizon"></i> Roadmap</a><li><a href="/tags?tag=bestof#info" ><i class="ph ph-star"></i> Best</a><li><a href="/projects" ><i class="ph ph-compass-tool"></i> Projects</a><li><a href="/now#supporting" ><i class="ph ph-hand-heart"></i> Supports</a><li><a href="/uses#referrals" ><i class="ph ph-hand-arrow-up"></i> Referrals</a><li><a href="/style" ><i class="ph ph-frame-corners"></i> Style</a><li><a href="/.well-known/security.txt" ><i class="ph ph-bug"></i> Report a Bug</a><li><a href="/humans.txt" ><i class="ph ph-user-rectangle"></i> Humans</a><li><a href="/disclaimer" ><i class="ph ph-info"></i> License & Disclaimer</a><li><a href="/privacy" ><i class="ph ph-cookie"></i> Privacy</a><li><a href="/starsharks" ><i class="ph ph-sparkle"></i> Starsharks</a><li><a href="/chipotle" ><i class="ph ph-pepper"></i> Chipotle</a><li><a href="/misc" ><i class="ph ph-paperclip"></i> Junk Drawer</a><li><a href="/ocean" ><i class="ph ph-waves"></i> the Ocean</a><li><a href="/void" ><i class="ph ph-spiral"></i> the Void</a><li class="menu_section">Other<li><a href="/public.pgp" ><i class="ph ph-key"></i> PGP Public Key</a><li><a href="https://infosec.pub/c/cybersecurity" target="_blank"><i class="ph ph-hamburger"></i> Infosec.Pub</a><li><a href="https://malici.ous.computer/@shellsharks" target="_blank"><i class="ph ph-linux-logo"></i> malici.ous.computer</a><li><a href="https://mastodon.social/@sass" target="_blank"><i class="ph-fill ph-mastodon-logo"></i> Mastodon.Social</a><li><a href="https://discord.gg/3rkHgtcYbb" target="_blank"><i class="ph ph-discord-logo"></i> Shellsharks Discord</a><li><a href="https://www.linkedin.com/in/mikesass" target="_blank"><i class="ph ph-linkedin-logo"></i> Linkedin</a><li><a href="/toots/infosec-exchange/shellsharks/" ><i class="ph ph-database"></i> Infosec.exchange Toot Archive</a><li><a href="https://github.com/shellsharks" target="_blank"><i class="ph ph-github-logo"></i> Github</a><li><a href="https://fediverse-webring-enthusiasts.glitch.me/profiles/shellsharks_infosec.exchange/index.html" target="_blank"><i class="ph ph-circle"></i> Webring Enthusiasts</a><li><a href="https://fedia.io/m/cybersecurity" target="_blank"><i class="ph ph-square-half"></i> Fedia.io</a><li><img src="/assets/img/avatar.png" height="50" style="position: relative; display: block; margin:auto; margin-top:20px; margin-bottom:20px;" /></ul></div></div><!-- window.onload = function() { var menuButton = document.getElementById('menuToggle'); var menu = document.getElementById('menu'); menu.classList.add('hidden'); document.getElementById("menuToggle").children[0].checked = false; } --> <script> const menuButton = document.getElementById('menuToggle'); const menu = document.getElementById('menu'); var links = menu.querySelectorAll('a'); menuButton.addEventListener('click', () => { if (!menu.contains(event.target)) { menu.classList.toggle('hidden'); } }); document.addEventListener('click', (event) => { if (!menu.contains(event.target) && !menuButton.contains(event.target)) { menu.classList.add('hidden'); if (document.getElementById("menuToggle").children[0].checked) { document.getElementById("menuToggle").children[0].checked = !document.getElementById("menuToggle").children[0].checked; } } }); links.forEach(function(link) { link.addEventListener('click', function(event) { document.querySelector("#hamburger").click(); }); }); </script> <img id="title_image" src="/assets/img/shellsharks.gif" alt="Shellsharks>_" onclick='window.open("/","_self")'> <span style="float:right;"><a href="/search"><i class="ph-bold ph-magnifying-glass" style="color:var(--font-color); font-size:1.6em; top:-2px;"></i></a></span> </heading><nav class="container_item"><ul id="nav_menu" style="list-style-type:none;padding-left: 10px;"><li class="menu_section">Main<li><a href="/home/feed" ><i class="ph ph-house"></i> Home Feed</a><li><a href="/about" ><i class="ph ph-identification-card"></i> About</a><li><a href="/feeds" ><i class="ph ph-rss"></i> Feeds</a><li><a href="/activity" ><i class="ph ph-pulse"></i> Activity</a><li><a href="https://shellsharks.social/@shellsharks" target="_blank"><i class="ph ph-mastodon-logo"></i> Mastodon</a><li><a href="mailto:mike@shellsharks.com" ><i class="ph ph-envelope"></i> Email</a><li><a href="https://ko-fi.com/shellsharks" ><i class="ph ph-coffee"></i> Buy me a Coffee</a><li id="themetoggler"><i class="ph ph-swatches" id="themetoggle"></i> Toggle theme<li class="menu_section">Site Nav<li><a href="/scrolls" ><i class="ph ph-scroll"></i> Scrolls Newsletter</a><li><a href="/podcast" ><i class="ph ph-microphone"></i> The Shellsharks Podcast</a><li><a href="/notebook" ><i class="ph ph-note"></i> Notebook</a><li><a href="/blogs" ><i class="ph ph-article"></i> Blogs</a><li><a href="/blogs/infosec" ><i class="ph ph-bug"></i> Infosec Blogs</a><li><a href="/captains-log" ><i class="ph-fill ph-notebook"></i> Captain's Log</a><li><a href="/devlog" ><i class="ph ph-code-block"></i> Devlog</a><li><a href="/linklog" ><i class="ph ph-link"></i> Linklog</a><li><a href="/blogroll" ><i class="ph ph-paint-roller"></i> Blogroll</a><li><a href="/fediverse" ><i class="ph ph-fediverse-logo"></i> Fediverse ‚ÅÇ</a><li><a href="/slashes" ><i class="ph ph-folder-simple-star"></i> Slashes</a><li><a href="/uses" ><i class="ph ph-hammer"></i> Uses</a><li><a href="/now" ><i class="ph ph-clock"></i> Now</a><li><a href="/tags" ><i class="ph ph-tag"></i> Tags</a><li><a href="/statboard" ><i class="ph ph-gauge"></i> Statboard</a><li><a href="/changelog" ><i class="ph ph-arrows-left-right"></i> Change Log</a><li><a href="/interests" ><i class="ph ph-heart"></i> Interests</a><li><a href="/ideas" ><i class="ph ph-lightbulb-filament"></i> Ideas</a><li><a href="/bookmarks" ><i class="ph ph-bookmarks"></i> Bookmarks</a><li><a href="/resume" ><i class="ph ph-read-cv-logo"></i> Resume</a><li><a href="/pro" ><i class="ph ph-seal"></i> Shellsharks Pro</a><li><a href="/sharkweek" ><i class="ph ph-calendar-heart"></i> >Shark Week</a><li><a href="/architecture" ><i class="ph ph-blueprint"></i> Architecture</a><li><a href="/roadmap" ><i class="ph ph-road-horizon"></i> Roadmap</a><li><a href="/tags?tag=bestof#info" ><i class="ph ph-star"></i> Best</a><li><a href="/projects" ><i class="ph ph-compass-tool"></i> Projects</a><li><a href="/now#supporting" ><i class="ph ph-hand-heart"></i> Supports</a><li><a href="/uses#referrals" ><i class="ph ph-hand-arrow-up"></i> Referrals</a><li><a href="/style" ><i class="ph ph-frame-corners"></i> Style</a><li><a href="/.well-known/security.txt" ><i class="ph ph-bug"></i> Report a Bug</a><li><a href="/humans.txt" ><i class="ph ph-user-rectangle"></i> Humans</a><li><a href="/disclaimer" ><i class="ph ph-info"></i> License & Disclaimer</a><li><a href="/privacy" ><i class="ph ph-cookie"></i> Privacy</a><li><a href="/starsharks" ><i class="ph ph-sparkle"></i> Starsharks</a><li><a href="/chipotle" ><i class="ph ph-pepper"></i> Chipotle</a><li><a href="/misc" ><i class="ph ph-paperclip"></i> Junk Drawer</a><li><a href="/ocean" ><i class="ph ph-waves"></i> the Ocean</a><li><a href="/void" ><i class="ph ph-spiral"></i> the Void</a><li class="menu_section">Other<li><a href="/public.pgp" ><i class="ph ph-key"></i> PGP Public Key</a><li><a href="https://infosec.pub/c/cybersecurity" target="_blank"><i class="ph ph-hamburger"></i> Infosec.Pub</a><li><a href="https://malici.ous.computer/@shellsharks" target="_blank"><i class="ph ph-linux-logo"></i> malici.ous.computer</a><li><a href="https://mastodon.social/@sass" target="_blank"><i class="ph-fill ph-mastodon-logo"></i> Mastodon.Social</a><li><a href="https://discord.gg/3rkHgtcYbb" target="_blank"><i class="ph ph-discord-logo"></i> Shellsharks Discord</a><li><a href="https://www.linkedin.com/in/mikesass" target="_blank"><i class="ph ph-linkedin-logo"></i> Linkedin</a><li><a href="/toots/infosec-exchange/shellsharks/" ><i class="ph ph-database"></i> Infosec.exchange Toot Archive</a><li><a href="https://github.com/shellsharks" target="_blank"><i class="ph ph-github-logo"></i> Github</a><li><a href="https://fediverse-webring-enthusiasts.glitch.me/profiles/shellsharks_infosec.exchange/index.html" target="_blank"><i class="ph ph-circle"></i> Webring Enthusiasts</a><li><a href="https://fedia.io/m/cybersecurity" target="_blank"><i class="ph ph-square-half"></i> Fedia.io</a></ul></nav><main class="container_item"><div class="pageheader"></div><article class="post h-entry"><header class="post-header"><h1 class="post-title p-name" id="title" style="display:inline;">Exploring Minix Character Device Drivers</h1><span style="color:#CA3342;font-size:4em;line-height: 20px;">.</span></header><!--<div id="postinfo"> <span class="time"><i class="ph ph-note-pencil"></i> by <span class="hov p-author h-card">Mike Sass</span> <a href="/about" rel="author"><img class="u-photo" src="https://shellsharks-images.s3.amazonaws.com/surfshark.png" style="display:inline; height:1em;" /></a></span><br/> <br/> <span class="categories"> &raquo; technology, blog </span></div>--><div class="post-content e-content" style="margin-top: 30px;"><p>This article is a continuation of what is covered in the <a href="https://wiki.minix3.org/doku.php?id=developersguide:driverprogramming">Programming Device Drivers in Minix</a> post found on the official <a href="https://wiki.minix3.org/doku.php">Minix 3 wiki</a>. That post is an introduction to programming device drivers on Minix in <strong>C</strong>. Device drivers are, in short, software programs that control hardware devices. <strong>Minix</strong>, as described by the <a href="https://www.minix3.org">Minix homepage</a>, is a free, open-source, operating system designed to be highly reliable, flexible and secure. Minix is certainly <a href="https://en.wikipedia.org/wiki/Category:Microkernel-based_operating_systems">not the only example</a> of a micro-kernel design for an operating system but it does serve as an introduction to the world of micro-kernels.<div class="containbox"> <b>Disclaimer</b>: This exploratory topic is related to some graduate work I did while <a href="/training-retrospective#jhu-masters-in-cybersecurity-review">pursuing my Masters degree</a>. I am by no means an expert in C programming nor Minix. With that said, there's not a lot of information out there on Minix so I hope this work can be valuable to others.</div><center><img src="https://shellsharks-images.s3.amazonaws.com/2019/minix.png" alt="minix" /></center><h1 id="minix-wiki-tutorial">Minix Wiki Tutorial</h1><p>Step 1 of course is to begin following the instructions detailed in the <a href="https://wiki.minix3.org/doku.php?id=developersguide:driverprogramming">Programming Device Drivers in Minix</a> tutorial. In that tutorial, you will create the driver directory, <em>Makefile</em> and driver file as well as setup the driver configuration file, start the driver service and create the character device. Rather than rehash all these steps (which are covered in great detail in that post), I will cover a few minor differences in my setup as well as a few <em>slightly</em> more advanced points.<p>Navigate to the Minix drivers directory <em>/usr/src/minix/drivers/</em>. Here, you can make a copy of the <em>hello</em> driver which was discussed in the <a href="https://wiki.minix3.org/doku.php?id=developersguide:driverprogramming">Wiki post</a> <em>/usr/src/minix/drivers/examples/hello</em>. In this folder you should see the <em>Makefile</em>, <em>hello.c</em>, header file and more (all of which was covered in the Minix <a href="https://wiki.minix3.org/doku.php?id=developersguide:driverprogramming">wiki post</a>). You do not need the <em>.o</em>, <em>.h</em> or <em>.d</em> files. You can <em>rm</em> them for now. From here, you can rename your <em>hello.c</em> file to whatever you want your device to be called (from here I will refer to this as <em>[name]</em>). Similarly, you will have to edit the contents of the <em>Makefile</em>, contents of the <em>hello.c</em> (now renamed to what you want) and the directory name of your driver replacing any instance of the word ‚Äú<em>hello</em>‚Äù with your chosen name word <em>[name]</em>.<p>After you‚Äôve made these name-related changes, you can test the build by running‚Ä¶<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make clean
make
make <span class="nb">install</span>
</code></pre></div></div><p>Unlike in the tutorial, rather than create a <em>hello.conf</em> in the driver‚Äôs directory itself, we instead put the configuration information in the more global <em>/etc/system.conf</em> directory/file. The configuration information for your driver can be the same as what was in the example ‚Äò<em>hello</em>‚Äô driver configuration. (In other words, you can copy exactly what is in this configuration file for the <em>hello</em> driver and put it at the end of the .conf file - but remember to change the name!).<p>Now, we can create the device file with the command‚Ä¶<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mknod</span> /dev/[name] c <span class="o">[</span>major number] <span class="o">[</span>minor number]
</code></pre></div></div><p>The <strong>major number</strong> and <strong>minor numbers</strong> are used by the system to associate the driver with the device. More information on these numbers can be read about <a href="https://www.oreilly.com/library/view/linux-device-drivers/0596000081/ch03s02.html">here</a>. Whats important is you <strong>choose a device number that is not already being used by an existing driver</strong>. You can see what device numbers are in used by running the command‚Ä¶<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">ls</span> <span class="nt">-l</span> /dev | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s2">" "</span> <span class="nt">-f</span> 11 | <span class="nb">cut</span> <span class="nt">-d</span> <span class="s2">","</span> <span class="nt">-f</span> 1 | <span class="nb">uniq</span> | <span class="nb">sort</span>
</code></pre></div></div><p>The service can now be booted up by running‚Ä¶<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service up /service/[name] <span class="nt">-major</span> <span class="o">[</span>chosen major number]
</code></pre></div></div><p>The service can also be taken down with the command‚Ä¶<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>service down <span class="o">[</span>name]
</code></pre></div></div><p>From here you should be able to read from the device driver. For example, issuing a <em>cat /dev/[name]</em> should let you read from the device. This is about where the Minix <a href="https://wiki.minix3.org/doku.php?id=developersguide:driverprogramming">wiki tutorial</a> finishes up.<h1 id="going-a-bit-further">Going a Bit Further‚Ä¶</h1><p>The simple character device driver from the Minix tutorial includes function prototypes for opening, closing and reading from the device file. But what if you would like some additional functionality - say, writing to or controlling I/O to the file?<p>In the driver source there is an include file referencing <em>&lt;minix/chardriver.h&gt;</em> (this is a reference to <em>/usr/include/minix/chardriver.h</em>). This file contains the entry points for additional device dependent character driver function prototypes. This file includes not only <strong>open</strong>, <strong>close</strong> and <strong>read</strong> but also <strong>write</strong>, <strong>ioctl</strong>, <strong>cancel</strong>, <strong>select</strong>, <strong>intr</strong>, <strong>alarm</strong> and <strong>other</strong>. For now, we will cover adding both write and I/O control (<em>ioctl</em>) functionality to the driver.<p>Included below are the function prototypes covered by this tutorial (from <em>/usr/include/minix/chardriver.h</em>).<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">chardriver</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cdr_open</span><span class="p">)(</span><span class="n">devminor_t</span> <span class="n">minor</span><span class="p">,</span> <span class="kt">int</span> <span class="n">access</span><span class="p">,</span> <span class="n">endpoint_t</span> <span class="n">user_endpt</span><span class="p">);</span>
  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cdr_close</span><span class="p">)(</span><span class="n">devminor_t</span> <span class="n">minor</span><span class="p">);</span>
  <span class="kt">ssize_t</span> <span class="p">(</span><span class="o">*</span><span class="n">cdr_read</span><span class="p">)(</span><span class="n">devminor_t</span> <span class="n">minor</span><span class="p">,</span> <span class="n">u64_t</span> <span class="n">position</span><span class="p">,</span> <span class="n">endpoint_t</span> <span class="n">endpt</span><span class="p">,</span> <span class="n">cp_grant_id_t</span> <span class="n">grant</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="n">cdev_id_t</span> <span class="n">id</span><span class="p">);</span>
  <span class="kt">ssize_t</span> <span class="p">(</span><span class="o">*</span><span class="n">cdr_write</span><span class="p">)(</span><span class="n">devminor_t</span> <span class="n">minor</span><span class="p">,</span> <span class="n">u64_t</span> <span class="n">position</span><span class="p">,</span> <span class="n">endpoint_t</span> <span class="n">endpt</span><span class="p">,</span> <span class="n">cp_grant_id_t</span> <span class="n">grant</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="n">cdev_id_t</span> <span class="n">id</span><span class="p">);</span>
  <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">cdr_ioctl</span><span class="p">)(</span><span class="n">devminor_t</span> <span class="n">minor</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">request</span><span class="p">,</span> <span class="n">endpoint_t</span> <span class="n">endpt</span><span class="p">,</span> <span class="n">cp_grant_id_t</span> <span class="n">grant</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="n">endpoint_t</span> <span class="n">user_endpt</span><span class="p">,</span> <span class="n">cdev_id_t</span> <span class="n">id</span><span class="p">);</span>
</code></pre></div></div><p>In your device driver code you will see these function prototypes initialized. You will notice of course that the <em>write</em> and <em>ioctl</em> functions are not included in the <em>hello</em> example driver. You must add these function declarations. This can be done by copying the declarations seen in the <em>chardriver.h</em> file described above into the driver source file. <strong>Note</strong> <em>_*__ the name of the function should not be (*cdr_open) but rather a function name of your choice, such as _[name]_write</em>.<p>Following the function prototype declarations, you will see some entry points into the driver, defined in <em>struct chardriver</em>. You will need to add some entry points for the other functions not defined in the original example <em>hello</em> driver. This includes the <em>write</em> and <em>ioctl</em> functions. Adding these to the <em>chardriver struct</em> can be seen below.<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="k">struct</span> <span class="n">chardriver</span> <span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="n">_tab</span> <span class="o">=</span>
<span class="p">{</span>
    <span class="p">.</span><span class="n">cdr_open</span>	<span class="o">=</span> <span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="n">_open</span><span class="p">,</span>
    <span class="p">.</span><span class="n">cdr_close</span>	<span class="o">=</span> <span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="n">_close</span><span class="p">,</span>
    <span class="p">.</span><span class="n">cdr_read</span>	<span class="o">=</span> <span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="n">_read</span><span class="p">,</span>
    <span class="p">.</span><span class="n">cdr_write</span> <span class="o">=</span> <span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="n">_write</span><span class="p">,</span>
    <span class="p">.</span><span class="n">cdr_ioctl</span> <span class="o">=</span> <span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="n">_ioctl</span><span class="p">,</span>
<span class="p">};</span>
</code></pre></div></div><h2 id="read-function"><em>read</em> Function</h2><p>As discussed in the Minix <a href="https://wiki.minix3.org/doku.php?id=developersguide:driverprogramming">wiki post</a>, the <em>read</em> function copies a string from the device driver program back to the calling user program by reading from the device file <em>/dev/hello</em>. This is done within the device driver primarily through the use of the <em>sys_safecopyto</em> function. The <em>sys_safecopyto</em> function reads <strong>size</strong> (which is a value passed to the <em>read</em> function as an argument) amount of bytes from the location pointed to by <strong>ptr</strong> and passes that back to the libc library <em>read</em> call which invoked it. In the code snippet below, whatever value is stored in <em>int contents</em> is passed back to the caller.<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">contents</span><span class="p">;</span>
<span class="p">...</span>
<span class="k">static</span> <span class="kt">ssize_t</span> <span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="n">_read</span><span class="p">(</span><span class="n">devminor_t</span> <span class="nf">UNUSED</span><span class="p">(</span><span class="n">minor</span><span class="p">),</span> <span class="n">u64_t</span> <span class="n">position</span><span class="p">,</span> <span class="n">endpoint_t</span> <span class="n">endpt</span><span class="p">,</span> <span class="n">cp_grant_id_t</span> <span class="n">grant</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">UNUSED</span><span class="p">(</span><span class="n">flags</span><span class="p">),</span> <span class="n">cdev_id_t</span> <span class="n">UNUSED</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
  <span class="n">ptr</span> <span class="o">=</span> <span class="n">contents</span><span class="p">;</span>
  <span class="n">size</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">ptr</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">ret</span> <span class="o">=</span> <span class="n">sys_safecopyto</span><span class="p">(</span><span class="n">endpt</span><span class="p">,</span> <span class="n">grant</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">vir_bytes</span><span class="p">)</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">size</span><span class="p">))</span> <span class="o">!=</span> <span class="n">OK</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div><p>This <em>read</em> function is invoked from a user program such as the (simple) one included below. This program simply reads an integer out of the device file and displays it on the command line.<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#inclue &lt;sys/types.h&gt;
#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#define [NAME]_DEV "/dev/[name]"
</span>
<span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">([</span><span class="n">NAME</span><span class="p">]</span><span class="n">_DEV</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">perror</span> <span class="p">(</span><span class="s">"open"</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">read</span> <span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">data</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">data</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">perror</span> <span class="p">(</span><span class="s">"read"</span><span class="p">)</span>
    <span class="n">exit</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">printf</span><span class="p">(</span><span class="s">"%d</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">data</span><span class="p">)</span>
  <span class="n">close</span> <span class="p">(</span><span class="n">data</span><span class="p">);</span>
  <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div><h2 id="write-function"><em>write</em> Function</h2><p>In the <em>[name]_write</em> function shown below, the reverse of <em>sys_safecopyto</em> is used - <strong>sys_safecopyfrom</strong>. This function is used to take data from the caller and write it into a value in the driver. The <em>sys_safecopyfrom</em> function writes <em>size</em> bytes from the calling libc library <em>write</em> function and writes it into the location pointed to by <em>ptr</em>. The <em>[name]_write</em> function code is shown below. In this case, an integer is being written from the calling function to the device file.<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">ssize_t</span> <span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="n">_write</span><span class="p">(</span><span class="n">devminor_t</span> <span class="nf">UNUSED</span><span class="p">(</span><span class="n">minor</span><span class="p">),</span> <span class="n">u64_t</span> <span class="n">position</span><span class="p">,</span> <span class="n">endpoint_t</span> <span class="n">endpt</span><span class="p">,</span> <span class="n">cp_grant_id_t</span> <span class="n">grant</span><span class="p">,</span> <span class="kt">size_t</span> <span class="n">size</span><span class="p">,</span> <span class="kt">int</span> <span class="n">UNUSED</span><span class="p">(</span><span class="n">flags</span><span class="p">),</span> <span class="n">cdev_id_t</span> <span class="n">UNUSED</span><span class="p">(</span><span class="n">id</span><span class="p">))</span>
<span class="p">{</span>
  <span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
  <span class="kt">int</span> <span class="n">value</span><span class="p">;</span>
  <span class="kt">int</span> <span class="o">*</span><span class="n">ptr</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">;</span>
  <span class="k">if</span> <span class="p">((</span><span class="n">ret</span> <span class="o">=</span> <span class="n">sys_safecopyfrom</span><span class="p">(</span><span class="n">endpt</span><span class="p">,</span> <span class="n">grant</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="n">vir_bytes</span><span class="p">)</span> <span class="n">ptr</span><span class="p">,</span> <span class="n">size</span><span class="p">))</span> <span class="o">!=</span> <span class="n">OK</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">ret</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</code></pre></div></div><p>An example of a C script which performs the libc library <em>write</em> call which calls the device driver <em>write</em> function and writes an integer to the device file is shown in the snippet below.<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
#inclue &lt;sys/types.h&gt;
#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#define [NAME]_DEV "/dev/[name]"
</span>
<span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">([</span><span class="n">NAME</span><span class="p">]</span><span class="n">_DEV</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">perror</span><span class="p">(</span><span class="s">"open"</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">argc</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">write</span> <span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">data</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">data</span><span class="p">))</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">perror</span> <span class="p">(</span><span class="s">"write"</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
  <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div><h2 id="ioctl-function"><em>ioctl</em> function</h2><p>Finally there is the <strong>ioctl</strong> function. <em>ioctl</em> is used to manipulate underlying device parameters of special files (i.e. device files).<p>To set up I/O control for this simple driver, we can create a header file (call it something like ioc_[name].h and place it in the <em>/usr/include/sys/</em> directory). This file can later be referenced in your device driver file using <em>#include &lt;sys/ioc</em>[name].h&gt;_. In this file, you will define the different I/O control methods. For example, you could define three I/O control methods which control reading, writing and clearing a device file. This code is shown below‚Ä¶<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#ifndef _S_I_[NAME]_H
#define _S_I_[NAME]_H
#include</span> <span class="cpf">&lt;minix/ioctl.h&gt;</span><span class="cp">
#define IOCREAD   _IOR('h', 3, u32_t)
#define IOCWRITE  _IOW('h', 4, u32_t)
#define IOCCLEAR  _IOW('h', 5, u32_t)
#endif
</span></code></pre></div></div><p>The file above has a single include, (<em>&lt;minix/ioctl.h</em>) which contains only a single line which is another include, (<em>&lt;sys/ioccom.h&gt;</em>). <em>ioccom.h</em> contains the references for different types of I/O control definitions. The two definitions we will use (in our simple driver addition) are shown in the snippet below. It‚Äôs important to note that there are far more definitions which could be used in more advanced drivers.<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#define _IOR(g,n,t)   _IOC(IOC_OUT,   (g), (n), sizeof(t))
#define _IOW(g,n,t)   _IOC(IOC_IN,   (g), (n), sizeof(t))
</span></code></pre></div></div><p>Now that we have the I/O header for our device driver, we can initialize the <em>[name]_ioctl</em> function in our driver file. The code snippet below is an example of how that would be done. The important function argument in the <em>ioctl</em> function is the <em>unsigned long request</em> parameter. This <em>request</em> value is the control value sent from the user program to the device driver which specifies which I/O control method is being invoked.<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">static</span> <span class="kt">int</span> <span class="p">[</span><span class="n">name</span><span class="p">]</span><span class="n">_ioctl</span><span class="p">(</span><span class="n">dev_minor_t</span> <span class="n">minor</span><span class="p">,</span> <span class="kt">unsigned</span> <span class="kt">long</span> <span class="n">request</span><span class="p">,</span> <span class="n">endpoint_t</span> <span class="n">endpt</span><span class="p">,</span> <span class="n">cp_grant_id_t</span> <span class="n">grant</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">,</span> <span class="n">endpoint_t</span> <span class="n">user_endpt</span><span class="p">,</span> <span class="n">cdev_id_t</span> <span class="n">id</span><span class="p">)</span>
<span class="p">{</span>  
  <span class="k">if</span><span class="p">(</span><span class="n">request</span><span class="o">==</span><span class="n">IOCREAD</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//Insert Functionality Here</span>
  <span class="p">}</span>
  <span class="k">if</span><span class="p">(</span><span class="n">request</span><span class="o">==</span><span class="n">IOCWRITE</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//Insert Functionality Here</span>
  <span class="p">}</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">request</span><span class="o">==</span><span class="n">IOCCLEAR</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">//Insert Functionality Here</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="o">-</span><span class="mi">1</span>
<span class="p">}</span>
</code></pre></div></div><p>An example user program is provided in the snippet below‚Ä¶ In this example, a single IOC call is made. It is up to you to figure out what you would like the different functionality to be!<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include</span> <span class="cpf">&lt;sys/types.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/ioc_[name].h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;sys/ioctl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;fcntl.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;stdlib.h&gt;</span><span class="cp">
#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
#define [NAME]_DEV "/dev/[name]"
</span>
<span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
  <span class="kt">int</span> <span class="n">data</span><span class="p">;</span>
  <span class="n">fd</span> <span class="o">=</span> <span class="n">open</span><span class="p">([</span><span class="n">NAME</span><span class="p">]</span><span class="n">_dev</span><span class="p">,</span> <span class="n">O_RDWR</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">perror</span> <span class="p">(</span><span class="s">"open"</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">ioctl</span> <span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="p">[</span><span class="n">IOCREAD</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">value</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
    <span class="n">perror</span> <span class="p">(</span><span class="s">"ioctl"</span><span class="p">);</span>
  <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
  <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div><p>This was just a quick look at adding a bit more functionality to a device driver in Minix. Thanks for reading and feel free to <a href="/contact">contact me</a> if there are any questions!</div></article><hr class="fin"><div id="poststats" class="containbox" style="margin: auto;"> <span class="time"><i class="ph ph-calendar-dot"></i> Published: <span class="dt-published">October 18, 2019</span></span> <a class="u-url u-uid" href></a><br> <span class='time'><i class="ph ph-calendar-dot"></i> Updated: <span class="dt-updated">March 5, 2021</span></span><br/> <span class="categories"><i class="ph ph-tag"></i> Tags: <span class="primarybg" style="border-radius:15px;padding:0px 5px 0px 5px;"><a class="p-category" href="/tags?tag=code">#code</a></span> <span class="primarybg" style="border-radius:15px;padding:0px 5px 0px 5px;"><a class="p-category" href="/tags?tag=cdev">#cdev</a></span> <span class="primarybg" style="border-radius:15px;padding:0px 5px 0px 5px;"><a class="p-category" href="/tags?tag=linux">#linux</a></span> <span class="primarybg" style="border-radius:15px;padding:0px 5px 0px 5px;"><a class="p-category" href="/tags?tag=minix">#minix</a></span> <span class="primarybg" style="border-radius:15px;padding:0px 5px 0px 5px;"><a class="p-category" href="/tags?tag=technology">#technology</a></span> </span><br/> <span class="time"><i class="ph ph-pencil"></i> Word count: 2608</span> <span class="p-summary" style="display:none;">Exploring a simple character device driver in Minix.</span></div><br/><div class="PageNavigation"> <a class="prev" style="margin-right: 2em;" href="/vlc-heap-overflow#title">&laquo; Heap Buffer Overflow in VLC v0.9.4</a><div style="float:right;"><a class="next" href="/online-training#title" style="margin-right:0;">Online IT/Security Training &raquo;</a></div></div></main><aside class="container_item"></aside><footer class="container_item"> <center><span style="color:var(--light-font-color); font-size:.8em; font-style:italic; position:relative; top:25px;">Brought to you with <i class="ph-fill ph-heart-straight" style="color:var(--accent-color);"></i> by <a href="https://shellsharks.com/about">Shellsharks</a></span></center> <center> <img id="sharkfooter" src="/assets/img/sharks-circling.png" alt="Circling Sharks" style="width:150px;"></img> </center></footer></div><noscript><div class="panel" align="center" style="font-weight:bold;"><h1>Please enable JavaScript.</h1></div></noscript> <script src="/assets/js/themeswitcher.js"></script>
